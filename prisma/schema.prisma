generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id
  name          String
  email         String         @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  comments      ImageComment[]
  likes         ImageLike[]
  sessions      Session[]
  images        UserImage[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserImage {
  id          String         @id
  url         String
  format      String         @default("jpg")
  description String?
  visavility  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String         @map("user_id")
  comments    ImageComment[]
  likes       ImageLike[]
  user        User           @relation(fields: [userId], references: [id])

  @@map("user_image")
}

model ImageLike {
  id        String    @id
  userId    String    @map("user_id")
  imageId   String    @map("image_id")
  createdAt DateTime  @default(now())
  image     UserImage @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("image_like")
}

model ImageComment {
  id        String    @id
  userId    String    @map("user_id")
  imageId   String    @map("image_id")
  content   String
  createdAt DateTime  @default(now())
  image     UserImage @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("image_comment")
}
