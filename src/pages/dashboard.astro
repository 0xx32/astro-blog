---
export const prerender = false

import { CldUploadWidget } from "astro-cloudinary"
import { CloudUpload } from "lucide-vue-next"

import Post from "@components/Post.astro"
import Layout from "@layouts/Layout.astro"
import { prisma } from "@utils/db"

const currentUser = Astro.locals.user

const images = await prisma.userImage.findMany({
	where: { userId: currentUser?.id },
	include: { likes: true, user: true, comments: true },
})
---

<Layout>
	<section class='flex flex-col items-center gap-4'>
		<img src={currentUser?.image} alt='' width='100' class='rounded-full' />
		<h1 class='text-4xl text-base-content brightness-150 font-bold'>
			Dashboard
		</h1>
		<p class='text-xl'>Вы можете загрузить фотографии или видео</p>

		<CldUploadWidget
			uploadPreset='astro-blog'
			id='upload-events'
			signatureEndpoint={'/api/signed'}
		>
			<button class='btn btn-accent'>
				<div class='flex items-center gap-2'>
					<span>Загрузить</span>
					<CloudUpload />
				</div>
			</button>
		</CldUploadWidget>
	</section>

	<section class=' py-6'>
		<h2 class='pb-6 text-3xl'>Ваши публикаии</h2>

		{!images.length && <p>Фотографии не найдены</p>}
		{
			images.length && currentUser && (
				<div class='grid grid-cols-1 lg:grid-cols-4 gap-4'>
					{images.map((img) => (
						<Post imgData={img} currentUser={currentUser} server:defer />
					))}
				</div>
			)
		}
	</section>
</Layout>

<script>
	import { actions } from 'astro:actions'

	interface CloudUploadEvent {
		event: Event
		info: {
			public_id: string
			format: string
		}
	}

	const widget = document.querySelector('#upload-events')
	if (widget) {
		// @ts-ignore
		widget.addEventListener(
			'clduploadwidget:success',
			async (e: CustomEvent<CloudUploadEvent>) => {
				const imageUrl = e.detail.info.public_id
				const format = e.detail.info.format

				const { data, error } = await actions.addImage({
					format,
					publicId: imageUrl,
				})

				if (error) console.info(error)

				if (data) {
					console.log(data)
					window.location.reload()
				}
			}
		) as unknown as EventListener
	}
</script>
